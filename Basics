Let - do define a constant, it means you can use the constant multiple places but assign a value once only
Var - do define a variable. 

let, var - types can be inferred by compiler based on the value assigned. 

Values are never implicitly converted to another type. 
If you need to convert a value to a different type, explicitly make an instance of the desired type.

Control flow 
if, switch -> make conditions 
for-in, while, repeat-while - make loops 
if let - to check the optionals have value or not 

Optional -> value or nil 
? -> mark after the type of a value to mark the value as optional. 
?? -> Provided default value

When working with optional values, you can write ? before operations like methods, properties, 
and subscripting. If the value before the ? is nil, everything after the ? is ignored and the value of the whole 
expression is nil. Otherwise, the optional value is unwrapped, and everything after the ? acts on the unwrapped value. 
In both cases, the value of the whole expression is an optional value.

let city: String ?
let defaultCity = "London"
let greetings = "Hello from \(city ?? defaultCity)".

Switches support any kind of data and a wide variety of comparison 
operations — they aren’t limited to integers and tests for equality.

for-in -> Iterate over dictionary 

Dictionaries are unordered collections, so their keys and values are iterated over in an arbitrary order. 

Use while -> to repeat a block of code until a condition changes. 

Range Index -> ..< to make a range that omits its upper value 
... to make a range that includes both values.

Tuple -> make a compound value. To return multiple values from Function. 

Functions - can be nested, are first-class type - function can return another function as its value. Function can take another function 
as its argument. 

Closure - Blocks of code that can be called later. 
Closure has access to variables, functions that were available in the scope where the closure was created, 
even if the closure is in different scope when executed. 

Class - class followed by the class's name create a class. 
A property declaration in a class is written the same way as a constant or variable declaration, except it's context of a class. 

Create an instance of a class by putting parentheses after the class name. Use dot syntax to access the properties and 
methods of the instance.

init -> Initialiser helps to set up the class when an instance is created. 
deinit -> Use deinit to create a deinitializer if you need to perform some cleanup before the object is deallocated.

Methods on a subclass that override the superclass’s implementation are marked with override

Properties can have getter and setter methods. 

    var perimeter: Double {
        get {
             return 3.0 * sideLength
        }
        set {
            sideLength = newValue / 3.0
        }
    }

In the setter for perimeter, the new value has the implicit name newValue. 
You can provide an explicit name in parentheses after set.

If you don’t need to compute the property but still need to provide code that’s run before and after setting a new value, 
use willSet and didSet. 

enum -> creates an enumeration. 
Can have methods associates with it. 
By default, Swift assigns the raw values starting at zero and incrementing by one each time, but you can change this 
behavior by explicitly specifying values.

You can also use strings or floating-point numbers as the raw type of an enumeration. 
Use the rawValue property to access the raw value of an enumeration case.

Use the init?(rawValue:) initializer to make an instance of an enumeration from a raw value. 
It returns either the enumeration case matching the raw value or nil if there’s no matching Rank.

Raw and Associated values in enum. 
If an enumeration has raw values, those values are determined as part of the declaration, which means every instance of a particular enumeration case always has the same raw value. 
Another choice for enumeration cases is to have values associated with the case — these values are determined when you make the instance, 
and they can be different for each instance of an enumeration case. You can think of the associated values as behaving like stored properties of the enumeration case instance.

structure -> 
Use struct to create a structure.
Structures support many of the same behaviors as classes, including methods and initializers. 
One of the most important differences between structures and classes is that structures are always
copied when they’re passed around in your code, but classes are passed by reference.

Concurrency -> 
Use async to mark a function that runs asynchronously.
func fetchUserID(from server: String) async -> Int {
    if server == "primary" {
        return 97
    }
    return 501
}

You mark a call to an asynchronous function by writing await in front of it.

func fetchUsername(from server: String) async -> String {
    let userID = await fetchUserID(from: server)
    if userID == 501 {
        return "John Appleseed"
    }
    return "Guest"
}

Use "async let" to call asynchronous function, letting it run in parallel with other asynchronous code. 
When you use the value it returns, write await. 
func connectUser(to server: String) async {
    async let userID = fetchUserID(from: server)
    async let username = fetchUsername(from: server)
    let greeting = await "Hello \(username), user ID \(userID)"
    print(greeting)
}

Use "Task" to call asynchronous functions from synchronous code, without waiting for them to return. 
Task {
    await connectUser(to: "primary")
}

Use "task groups" to structure concurrent code. 
let userIDs = await withTaskGroup(of: Int.self) { group in
    for server in ["primary", "secondary", "development"] {
        group.addTask {
            return await fetchUserID(from: server)
        }
    }


    var results: [Int] = []
    for await result in group {
        results.append(result)
    }
    return results
}

Actors -> Simillar to Class, except they ensure that different asynchronous 
functions can safely interact with an instance of the same actor at the same time.

actor ServerConnection {
    var server: String = "primary"
    private var activeUsers: [Int] = []
    func connect() async -> Int {
        let userID = await fetchUserID(from: server)
        // ... communicate with server ...
        activeUsers.append(userID)
        return userID
    }
}
When you call a method on an actor or access one of its properties,
you mark that code with await to indicate that it might have to wait for other code that’s already running on the actor to finish.
let server = ServerConnection()

let userID = await server.connect()

Protocols -> Use protocol to declare a protocol. 
Classes, enumerations, and structures can all adopt protocols.

You can use an extension to add protocol conformance to a type that’s declared elsewhere, 
or even to a type that you imported from a library or framework.

You can use a protocol name just like any other named type — for example, to create a collection of objects that have different types but that all conform to a single protocol. 
When you work with values whose type is a boxed protocol type, methods outside the protocol definition aren’t available.

Error Handling
You represent errors using any type that adopts the Error protocol.

enum PrinterError: Error {
    case outOfPaper
    case noToner
    case onFire
}
Use throw to throw an error and throws to mark a function that can throw an error. 

If you throw an error in a function, the function returns immediately and the code that called the function handles the error.

Various ways to handle errors.
1. do-catch block 
Inside the do block, you mark code that can throw an error by writing try in front of it. 
Inside the catch block, the error is automatically given the name error unless you give it a different name.

2. Use try? - to convert the result to an optional. 
If the function throws an error, the specific error is discarded and the result is nil. 
Otherwise, the result is an optional containing the value that the function returned.

Defer:
Use defer to write a block of code that’s executed after all other code in the function, just before the function returns. 
The code is executed regardless of whether the function throws an error. 
You can use defer to write setup and cleanup code next to each other, even though they need to be executed at different times.

Generics:
Write a name inside brackets to make a generic function or type. 

You can make generic forms of functions and methods, as well as classes, enumerations, and structures.

Assertions and Preconditions:
Assertions and preconditions are checks that happen at runtime. 
You use them to make sure an essential condition is satisfied before executing any further code. 
You use assertions and preconditions to express the assumptions you make and the expectations you have while coding, so you can include them as part of your code. 
Assertions help you find mistakes and incorrect assumptions during development, and preconditions help you detect issues in production.

The difference between assertions and preconditions is in when they’re checked: 
Assertions are checked only in debug builds, but preconditions are checked in both debug and production builds. 
In production builds, the condition inside an assertion isn’t evaluated. 
This means you can use as many assertions as you want during your development process, without impacting performance in production.

let age = -3
assert(age >= 0, "A person's age can't be less than zero.")

precondition(index > 0, "Index must be greater than zero.")

Tuple Comparision
You can compare two tuples if they have the same type and the same number of values. 
Tuples are compared from left to right, one value at a time, until the comparison finds two values that aren’t equal. 
Those two values are compared, and the result of that comparison determines the overall result of the tuple comparison. 
If all the elements are equal, then the tuples themselves are equal. 

Nil-Coalescing Operator (??): 
a??b -> It means 
The nil-coalescing operator (a ?? b) unwraps an optional a if it contains a value, or returns a default value b if a is nil. 
Short-hand for below code. 
a != nil ? a! : b
The nil-coalescing operator provides a more elegant way to encapsulate this conditional checking and unwrapping in a concise and readable form.
If the value of a is non-nil, the value of b isn’t evaluated. This is known as short-circuit evaluation.

Range Operators:
Shortcuts to expressing range of values. 
Closed Range: (...)
The closed range operator (a...b) defines a range that runs from a to b, and includes the values a and b. 
The value of a must not be greater than b.
for index in 1...5 {
    print("\(index) times 5 is \(index * 5)")
}
Half-Open Range Operator: (..<)
The half-open range operator (a..<b) defines a range that runs from a to b, but doesn’t include b. 
It’s said to be half-open because it contains its first value, but not its final value. 
As with the closed range operator, the value of a must not be greater than b.
If the value of a is equal to b, then the resulting range will be empty.

Half-open ranges are particularly useful when you work with zero-based lists such as arrays, 
where it’s useful to count up to (but not including) the length of the list
let names = ["Anna", "Alex", "Brian", "Jack"]
let count = names.count
for i in 0..<count {
    print("Person \(i + 1) is called \(names[i])")
}
One-Sided Ranges:
The closed range operator has an alternative form for ranges that continue as far as possible in one direction.
In these cases, you can omit the value from one side of the range operator. 
This kind of range is called a one-sided range because the operator has a value on only one side.

for name in names[2...] {
    print(name)
}
// Brian
// Jack

String:
A string is a series of characters, such as "hello, world" or "albatross". 
Swift strings are represented by the String type. 
The contents of a String can be accessed in various ways, including as a collection of Character values.

Swift’s String and Character types provide a fast, Unicode-compliant way to work with text in your code. 
String concatenation is as simple as combining two strings with the + operator, 
and string mutability is managed by choosing between a constant or a variable, just like any other value in Swift. 
You can also use strings to insert constants, variables, literals, and expressions into longer strings, 
in a process known as "string interpolation".

Despite this simplicity of syntax, Swift’s String type is a fast, modern string implementation. 
Every string is composed of encoding-independent Unicode characters, 
and provides support for accessing those characters in various Unicode representations.

Strings are value types in swift. 
 If you create a new String value, that String value is copied when it’s passed to a function or method, 
or when it’s assigned to a constant or variable.

Swift’s copy-by-default String behavior ensures that when a function or method passes you a String value, it’s clear that you own that exact String value, regardless of where it came from. 
You can be confident that the string you are passed won’t be modified unless you modify it yourself.
Behind the scenes, Swift’s compiler optimizes string usage so that actual copying takes place only when absolutely necessary. 
This means you always get great performance when working with strings as value types.

You can access the individual Character values for a String by iterating over the string with a for-in loop
for character in "Dog!🐶" {
    print(character)
}

let exclamationMark: Character = "!"

Concatenating Strings and Characters: By +, append. 

String Interpolation:
String interpolation is a way to construct a new String value from a mix of constants, variables, literals,
and expressions by including their values inside a string literal.
let multiplier = 3
let message = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)"

Unicode:
Unicode is an international standard for encoding, representing, and processing text in different writing systems. 
It enables you to represent almost any character from any lBehind the scenes, Swift’s native String type is built from Unicode scalar values. 
A Unicode scalar value is a unique 21-bit number for a character or modifieranguage in a standardized form, and to read and write those characters to and from an external source such as a text file or web page. 
Swift’s String and Character types are fully Unicode-compliant.

Every instance of Swift’s Character type represents a single extended grapheme cluster. 
An extended grapheme cluster is a sequence of one or more Unicode scalars that (when combined) produce a single human-readable character.

String Indices:
Each String value has an associated index type, String.Index, which corresponds to the position of each Character in the string.
As mentioned above, different characters can require different amounts of memory to store, 
so in order to determine which Character is at a particular position, you must iterate over each Unicode scalar from the start or end of that String. 
For this reason, Swift strings can’t be indexed by integer values.
Use the startIndex property to access the position of the first Character of a String. 
The endIndex property is the position after the last character in a String.
If a String is empty, startIndex and endIndex are equal.
You access the indices before and after a given index using the index(before:) and index(after:) methods of String. 
To access an index farther away from the given index, you can use the index(_:offsetBy:) method instead of calling one of these methods multiple times.

let greeting = "Guten Tag!"
greeting[greeting.startIndex]
// G
greeting[greeting.index(before: greeting.endIndex)]
// !
greeting[greeting.index(after: greeting.startIndex)]
// u
let index = greeting.index(greeting.startIndex, offsetBy: 7)
greeting[index]
// a

Use the indices property to access all of the indices of individual characters in a string.
for index in greeting.indices {
    print("\(greeting[index]) ", terminator: "")
}

Insert and Remove 
To insert a single character into a string at a specified index, use the insert(_:at:) method, 
and to insert the contents of another string at a specified index, use the insert(contentsOf:at:) method.

var welcome = "hello"
welcome.insert("!", at: welcome.endIndex)
// welcome now equals "hello!"
welcome.insert(contentsOf: " there", at: welcome.index(before: welcome.endIndex))
// welcome now equals "hello there!"

To remove a single character from a string at a specified index, use the remove(at:) method, 
and to remove a substring at a specified range, use the removeSubrange(_:) method:
welcome.remove(at: welcome.index(before: welcome.endIndex))
// welcome now equals "hello there"

let range = welcome.index(welcome.endIndex, offsetBy: -6)..<welcome.endIndex
welcome.removeSubrange(range)
// welcome now equals "hello"

SubString
Like strings, 
each substring has a region of memory where the characters that make up the substring are stored.
The difference between strings and substrings is that, as a performance optimization, 
a substring can reuse part of the memory that’s used to store the original string, or part of the memory that’s used to store another substring. 
(Strings have a similar optimization, but if two strings share memory, they’re equal.) 
This performance optimization means you don’t have to pay the performance cost of copying memory until you modify either the string or substring. 
As mentioned above, substrings aren’t suitable for long-term storage — because they reuse the storage of the original string, the entire original string must be kept in memory as long as any of its substrings are being used.

String and character equality is checked with the “equal to” operator (==) and the “not equal to” operator (!=)
Two String values (or two Character values) are considered equal if their extended grapheme clusters are canonically equivalent. 
Extended grapheme clusters are canonically equivalent if they have the same linguistic meaning and appearance, 
even if they’re composed from different Unicode scalars behind the scenes.

To check whether a string has a particular string prefix or suffix, call the string’s hasPrefix(_:) and hasSuffix(_:) methods, 
both of which take a single argument of type String and return a Boolean value.


