AccessControl
- Manage the visibility of code by declaration, file, and module.

1. What is Access Control?
Access control restricts access to parts of your code from code in other source files and modules.

2. Why Access Control?
This feature enables you to hide the implementation details of your code, and to specify a preferred interface through which that code can be accessed and used.

3. Where can specify the access control?
You can assign specific access levels to individual types (classes, structures, and enumerations), as well as to properties, methods, initializers, and subscripts belonging to those types. 
Protocols can be restricted to a certain context, as can global constants, variables, and functions.

4. Where explicit access control mention is not necessary?
If you are writing a single-target app, you may not need to specify explicit access control levels at all.

5. What is module?
A module is a single unit of code distribution — a framework or application that’s built and shipped as a single unit and that can be 
imported by another module with Swift’s import keyword.
Each build target (such as an app bundle or framework) in Xcode is treated as a separate module in Swift

6. What is source file?
A source file is a single Swift source code file within a module (in effect, a single file within an app or framework). 

7. What is Packages?
A package is a group of modules that you develop as a unit. 

8. How many access levels in swift?
There are 6 different access levels in swift. 
These access levels are relative to the source file in which an entity is defined, the module that source file belongs to, and the package that the module belongs to.

1. Open  
2. Public  
3. Package 
4. Internal 
5. File-Private 
6. Private 

1. Open -> Highest (least restrictive) access level. 
Enable entities to be used 
1. within any source file from their defining module, 
2. and also in a source file from another module that imports the defining module.
You typically use open when specifying the public interface to a framework.
- Open access applies only to classes and class members.
- Allows code outside the module to subclass and override.

2. Public:
Can be used for structure, its usage guidelines as is Open access. 

3. Package: Enables entities to be used within any source files from their defining package but not in any source file outside of that package.
You typically use package access within an app or framework that’s structured into multiple modules.

4. Internal: Enables entities to be used within any source file from their defining module, but not in any source file outside of that module. 
You typically use internal access when defining an app’s or a framework’s internal structure.

5. File-private: Access restricts the use of an entity to its own defining source file.
Private access within the file itself. 
fileprivate declared variable is accessible within the same file. 

6. Private: 
Use restricts the use of an entity to the enclosing declaration, and to extensions of that declaration that are in the same file
Private access is the lowest (most restrictive) access level.

7. Access levels for single-target apps. 
When you write a simple single-target app, the code in your app is typically 
self-contained within the app and doesn’t need to be made available outside of the app’s module. 
The default access level of internal already matches this requirement. 

8. Access levels for frameworks. 
When you develop a framework, mark the public-facing interface to that framework as open or public so that it can be viewed and accessed by other modules, such as an app that imports 
the framework. 

9. Access levels for Unit Test targets
A unit test target can access any internal entity, if you mark the import declaration for product module with @testable attribute and compile that product module with testing enabled.

10. Access levels of Tuple types. 
The access level for a tuple type is the most restrictive access level of all types used in that tuple. For example, 
if you compose a tuple from two different types, one with internal access and one with private access, 
the access level for that compound tuple type will be private.

11. Access levels for enumeration types. 
The individual cases of an enumeration automatically receive the same access level as the enumeration they belong to. 
You can’t specify a different access level for individual enumeration cases.
The types used for any raw values or associated values in an enumeration definition must have an access level at least as high as the enumeration’s access level. 
For example, you can’t use a private type as the raw-value type of an enumeration with an internal access level.

12. Access levels of subclass
You can also subclass any open class that’s defined in a different module. A subclass can’t have a higher access level than its superclass — for example, 
you can’t write a public subclass of an internal superclass.

13. Access levels of getter and setter. 
Getters and setters for constants, variables, properties, and subscripts automatically receive the same access level as the constant, variable, property, or subscript they belong to.
You can give a setter a lower access level than its corresponding getter, to restrict the read-write scope of that variable, property, or subscript. 
You assign a lower access level by writing fileprivate(set), private(set), internal(set), or package(set) before the var or subscript introducer.

14. Access level for initialisers 
Cusstom initialiser can be assigned an access level less than or equal to the type that they initialise. 
A required initializer must have the same access level as the class it belongs to. 

15. What is the access level of default initialiser?
A default initializer has the same access level as the type it initializes, unless that type is defined as public. 
For a type that’s defined as public, the default initializer is considered internal.

The default memberwise initializer for a structure type is considered private if any of the structure’s stored properties are private. Likewise,
if any of the structure’s stored properties are file private, the initializer is file private. 
Otherwise, the initializer has an access level of internal.

16. Accesslevel for protocol
If you want to assign an explicit access level to a protocol type, do so at the point that you define the protocol. 
This enables you to create protocols that can only be adopted within a certain access context.

If you define a new protocol that inherits from an existing protocol, the new protocol can have at most the same access level as the protocol it inherits from. 
For example, you can’t write a public protocol that inherits from an internal protocol.


