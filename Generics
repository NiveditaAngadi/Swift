Generics are a fundamental tool for writing abstract code in Swift, which is crucial for managing complexity as your code evolves. 
Write a code that works for multiple types and specify requirements for those types. 

Generic code enables you to write flexible, reusable functions and types that can work with any type, subject to requirements that you define. 
You can write code that avoids duplicates and expresses its intent in a clear, abstracted manner. 

Generic functions can work with any type. 
Here's generic version of the swap two values function. 

func swapTwoValues<T>(_ a: inout T, _b: inout T) {
 let temporaryA = a 
 a = b 
 b = temporaryA 
}

T - placeholder type name (called T, in this case) instead of actual type name(such as Int, String, or Double). 

The placeholder type name doesn't say anything about what T must be, but it does say that both a and b must be of the same type T, whatever T represents. 
The actual type to use in place of T is determined each time the swapTwoValues(_: _:) function is called.

Type Parameter-> 
Type parameters specify and name a placeholder type, and are written immediately after the function's name, between a pair of matching angle brackets such as <T>.
Type parameter - you can use to define the type of a function's parameters or function's return type, or as a type annotation within the body of the function.
In each case, the type parameter is replaced with an actual type 
the function is called. 

You can provide more than one type parameter by writing type parameter names within the angle brackets, seperated by commas. 

Generic Types:
In addition to the generic functions, Swift enables you to define your own generic types. 
These are custom classes, structures, and enumerations that can work with any type, in a similar way to Array and Dictionary. 

struct Stack<Element> {
  var items: [Element] = []

  mutating func push(_ item: Element) {
   items.append(item)
  }

  mutating func pop() -> Element {
   return items.removeLast()
  }
}

example:
// Stack of String 
var stackOfStrings = Stack<String>()
stackOfStrings.push("uno")
stackOfStrings.push("dos")
stacksOfStrings.push("tres")
stacksOfStrings.push("cuatro")

let fromTheTop = stackOfStrings.pop()
// cuatro 

**** Extending a Generic Type ****
You can write a extension for the generic type. In the generic type don't provide type parameter, explicitly type parameter is available in the extension.

extension Stack {
 var topItem: Element? {
   return items.isEmpty ? nil : items[items.count - 1] 
 }
}

Note that this extension doesn’t define a type parameter list. 
Instead, the Stack type’s existing type parameter name, Element, is used within the extension to indicate the optional type of the topItem computed property.

Extensions of a generic type can also include requirements that instances of the extended type must satisfy in order to gain the new functionality. 

**** Type Constraints ****
Type constraints specify that a type parameter must inherit from a specific class, or conform to a particular protocol or protocol composition. 
It's sometimes useful to enforce certain type constraints on the types that can be used with generic functions and generic types. 

For example, Swift's dictionary type places a limitation on the types that can be used as keys for a dictionary.
The type of a dictionary's keys must be hashable. That is, it must provide a way to make itself uniquely representable. 

*** Type Constraint Syntax *** 
You write type constraints by placing a single class or protocol constraint after a type parameter's name, seperated by a colon, as part of the type parameter
list. 

The basic syntax for type constraints on a generic function is shown below. 

func someFunction<T: SomeClass, U: SomeProtocol>(someT: T, someU: U) {
}

The hypothetical function above has two type parameters. 
The first type parameter, T, has a type constraint that requires T to be a subclass of SomeClass, 
The second type parameter, U, has a type constraint that required U to be conforms to the proptocol - SomeProtocol. 

**** Associated Type **** 
An associated type gives a placeholder name to a type that's used as part of the protocol.
When defining a protocol, it's sometimes useful to declare one or more associated types as part of the protocl's defination. 
The actual type to use for that associated type isn't specified until the protocol is adopted. 
Associated types are specified with the associatedtype keyword. 

protocol Container {
  associatedtype Item 
  mutating func append(_ item: Item)
  var count: Int { get }
  subscript(i: Int) -> Item { get }
}

This protcol doesn't specify how the items in the container should be stored or what type they're allowed to be. 

struct IntStack: Container {
var items: [Int] = [] 
mutating func push(_ item: Int) {
items.append(item)
}

mutating func pop() -> Int {
return items.removeLast()
}

// conformance to the Container protocol 
typealias Item = Int 
mutating func append(_ item: Int) {
  self.push(item)
}

 var count: Int {
   return items.count
 }

subscript(i: Int) -> Int {
 return items[i]
}

}

You can also make the generic Stack type conform to the Container protocol

struct Stack<Element>: Container {
    // original Stack<Element> implementation
    var items: [Element] = []
    mutating func push(_ item: Element) {
        items.append(item)
    }
    mutating func pop() -> Element {
        return items.removeLast()
    }
    // conformance to the Container protocol
    mutating func append(_ item: Element) {
        self.push(item)
    }
    var count: Int {
        return items.count
    }
    subscript(i: Int) -> Element {
        return items[i]
    }
}

**** Adding Contraints to an Associated Type **** 
You can add type constraints to an associated type in a protocol to require that conforming types satisfy those constraints. 

protocol Container {
  associatedtype Item: Equatable
  mutating func append(_ item: Item) 
  var count: Int { get }
  subscript(i: Int) -> Item { get }
}
 To conform to this version of Container, the container's Item type has to conform to the Equatable protocol.

**** Generic Where Clauses **** 
Type constraints, enable you to define requirements on the type parameters associated with a generic function, subscript, or type. 

It can also be useful to define requirements for associated types.  You do this by defining a "generic where clause".
 A generic where clause enables you to require that an associated type must conform to a certain protocol, 
 or that certain type parameters and associated types must be the same. 
A generic where clause starts with the "where" keyword, followed by constraints for associated types 
or equality relationships between types and associated types. 
You write a generic where clause right before the opening curly brace of a type or function’s body.


func allItemsMatch<C1: Container, C2: Container>
        (_ someContainer: C1, _ anotherContainer: C2) -> Bool
        where C1.Item == C2.Item, C1.Item: Equatable {
}

**** Extensions with a Generic Where Clause **** 
You can also use a generic where clause as part of an extension. 

extension Stack where Element: Equatable {
    func isTop(_ item: Element) -> Bool {
        guard let topItem = items.last else {
            return false
        }
        return topItem == item
    }
}

Using a generic where clause lets you add a new requirement to the extension.

You can use a generic where clause with extensions to a protocol. 

extension Container where Item: Equatable {
    func startsWith(_ item: Item) -> Bool {
        return count >= 1 && self[0] == item
    }
}

**** Contextual Where Clauses **** 
You can write a generic where clause as part of a declaration that doesn’t have its own generic type constraints, 
when you’re already working in the context of generic types.

You can write a generic where clause on a subscript of a generic type or on a method in an extension to a generic type.

extension Container {
    func average() -> Double where Item == Int {
        var sum = 0.0
        for index in 0..<count {
            sum += Double(self[index])
        }
        return sum / Double(count)
    }
    func endsWith(_ item: Item) -> Bool where Item: Equatable {
        return count >= 1 && self[count-1] == item
    }
}
let numbers = [1260, 1200, 98, 37]
print(numbers.average())
// Prints "648.75"
print(numbers.endsWith(37))
// Prints "true"


extension Container where Item == Int {
    func average() -> Double {
        var sum = 0.0
        for index in 0..<count {
            sum += Double(self[index])
        }
        return sum / Double(count)
    }
}
extension Container where Item: Equatable {
    func endsWith(_ item: Item) -> Bool {
        return count >= 1 && self[count-1] == item
    }
}

**** Associated Types with a Generic Where Clause **** 
You can include a generic where clause on an associated type. 

protocol Container {
    associatedtype Item
    mutating func append(_ item: Item)
    var count: Int { get }
    subscript(i: Int) -> Item { get }


    associatedtype Iterator: IteratorProtocol where Iterator.Element == Item
    func makeIterator() -> Iterator
}

**** Generic Subscripts **** 
Subscripts can be generic. 

1. How are generics used in protocols?
Generics can be used in protocol requirements or in the protocol itself with associated types.

  - associatedtype defines a placeholder within the protocol.
	•	Implementers of the protocol define the actual type.

protocol Container {
    associatedtype Item
    var items: [Item] { get set }
    mutating func addItem(_ item: Item)
}

struct Stack<T>: Container {
    var items = [T]()
    mutating func addItem(_ item: T) {
        items.append(item)
    }
}

2. Explain the difference between associated types and generic type parameters.
•	Associated Types:
	•	Used in protocols to define a placeholder type.
	•	Can be constrained to specific types or protocols.

•	Generic Type Parameters:
	•	Used in functions, classes, and structs.
	•	Defined using <T> syntax.

3.  How does Swift handle generic specialization for performance?
Swift uses "generic specialization" to optimize generic code by creating type-specific implementations during compilation. 
This reduces runtime overhead and makes generics almost as efficient as non-generic code.

Example:
When you call a generic function with Int, Swift generates a specialized version for Int.

4. Can generics be used with enums? Provide an example.
Yes, generics can be used with enums to handle associated values of any type.

enum Result<T> {
    case success(T)
    case failure(Error)
}

let successResult: Result<String> = .success("Data Loaded")
let failureResult: Result<String> = .failure(NSError(domain: "Error", code: -1))

5. How would you design a type-safe generic API for dependency injection?
Using a generic container class to resolve dependencies.

class DependencyContainer {
    private var factories = [String: Any]()

    func register<T>(_ type: T.Type, factory: @escaping () -> T) {
        factories[String(describing: type)] = factory
    }

    func resolve<T>(_ type: T.Type) -> T {
        guard let factory = factories[String(describing: type)] as? () -> T else {
            fatalError("No factory registered for \(type)")
        }
        return factory()
    }
}

// Usage
let container = DependencyContainer()
container.register(String.self) { "Hello, World!" }
let message: String = container.resolve(String.self)
print(message) // Output: Hello, World!

6. Can you overload a function using generics? Provide an example.
Yes, you can overload a function with different generic constraints.

func printValue<T>(_ value: T) {
    print("Generic value: \(value)")
}

func printValue<T: Numeric>(_ value: T) {
    print("Numeric value: \(value)")
}

printValue(42) // Numeric value: 42
printValue("Hello") // Generic value: Hello


