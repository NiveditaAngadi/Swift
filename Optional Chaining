1. What is Optionals in Swift?
A type represents either a wrapped value or absence of a value. 

Optionals in swift handle the absence of a value.
An optional represents two possibilities, either there is a value and you can unwrap the optional to access it, or there is no value 
at all. 

enum OptionalValue<T> {
case none //Represents the absence of value - value less state 
case some(T) 
}

var name: String? // This can be nil
name = "John Doe"
if let unwrappedName = name {
    print("The name is \(unwrappedName)")
} else {
    print("No name")
}


Optional Chaining 
Access members of an optional value without unwrapping 

2. Explain optional chaining
Optional chaining is a process for querying and calling properties, methods, and subscripts on an optional that might currently be nil. 
If the optional contains a value, the property, method, or subscripts call succeds; if the optional is nil, the property, method and subscript call return nil. 

2. Explain the difference between optional chaining and forced unwrapping. 
You specify optional chaining by placing a question mark (?) after the optional value on which you wish to call a property, method or subscript if the optional is non-nil. 
This is very simiallar to the forced unwrapping, that is placing ! mark at the end. 
The main difference is that optional chaining fails gracefully when the optional is nil, where as forced unwrapping triggers a runtime error when the optional is nil.

3. Is return type of optional chaining is also optional?
Yes. return type of optional chaining is always optional, though it returns the non-nil value. 
The result of an optional chaining call is of the same type as the expected return value, but wrapped in an optional. 
A property that normally returns an Int will return an Int? when accessed through optional chaining.

4. Usage of optional chanining 
1. Safely access the value of the property, methods, subscript 
2. Verify the existance of non-nil value
3. Access a property on an optional value, and to check if that property access is successful. 
4. You can use optional chaining to call a method on an optional value, and check whether that method call is successful. 
5. Any attempt to set a property through optional chaining returns a value of type Void?, which enables you to compare against nil to see if the property was set successfully. 
6. You can use optional chaining to try to retrieve and set a value from a subscript on an optional value, and to check whether that subscript call is successful.
When you access a subscript on an optional value through optional chaining, 
you place the question mark before the subscript’s brackets, not after.
if let firstRoomName = john.residence?[0].name {
    print("The first room name is \(firstRoomName).")
} else {
    print("Unable to retrieve the first room name.")
}


5. Explain rules of optional chaining 
- If the type you are trying to retrieve isn’t optional, it will become optional because of the optional chaining.
- If the type you are trying to retrieve is already optional, it will not become more optional because of the chaining.

- If you try to retrieve an Int value through optional chaining, an Int? is always returned, no matter how many levels of chaining are used.
- Similarly, if you try to retrieve an Int? value through optional chaining, an Int? is always returned, no matter how many levels of chaining are used.

6. How can you safely unwrap an optional?
You can safely unwrap an optional using, 
1. Optional Binding (if let and guard let)

if let unwrappedName = name {
    print("Name is \(unwrappedName)")
}

2. Nil-coalesing operator(??)
let displayName = name ?? "Unknown"

3. Implicit Unwrapping with Caution
print(name!) // Use only when you are certain it's not nil.

7.  What is the difference between nil in Objective-C and nil in Swift? 
    • In Objective-C, nil is a pointer to a non-existent object, and sending a message to nil is a no-op.
    • In Swift, nil is not a pointer but represents the absence of a value for any type, including non-objects like Int or Bool. 
    Attempting to use nil without unwrapping an Optional results in a compile-time error.

struct Person {
    var name: String?
}

let person: Person? = Person(name: "John")
let nameLength = person?.name?.count // Safely checks and returns name length

8. What are Implicitly Unwrapped Optionals? When should you use them?
Implicitly Unwrapped Optionals are declared with ! instead of ?. They are assumed to always contain a value once initialized, and Swift unwraps them automatically.

var email: String! = "test@example.com"
print(email) // No need to unwrap

9. What happens when you use ! on a nil Optional?
Using ! to force-unwrap a nil Optional causes a runtime crash with the error: fatal error: Unexpectedly found nil while unwrapping an Optional value.

let number: Int? = nil
print(number!) // Crash

10. Common pitfalls of Optionals in Swift?
	1.	Overusing Force Unwrapping (!): Can lead to runtime crashes.
	2.	Implicitly Unwrapped Optionals: Misusing them when a value might not always be present.
	3.	Forgetting to Unwrap Optionals: Leads to compilation errors.
	4.	Optional Pyramid of Doom: Using nested Optional Binding without refactoring can make code unreadable.

11. What is the meaning of ? and !
? : Marks a variable as an Optional that needs to be explicitly unwrapped.

! : Marks a variable as an Implicitly Unwrapped Optional, assuming it always has a value after being set.

11. What is the purpose of Optional.none and Optional.some?
Optional.some and Optional.none are enumeration cases for Optionals in Swift. They are equivalent to nil and wrapped values.

let value: Int? = Optional.some(42) // Same as 42
let emptyValue: Int? = Optional.none // Same as nil


