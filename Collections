Organize data using arrays, sets, and dictionaries.

Swift provides three primary collection types.
1. Arrays - Ordered 
2. Sets - Unordered - Unique values 
3. Dictionaries - Unordered collections of key-value associations. 

Arrays, sets, and dictionaries in Swift are always clear about the types of values and keys that they can store. 
This means that you can’t insert a value of the wrong type into a collection by mistake. 
It also means you can be confident about the type of values you will retrieve from a collection.

Mutable and Immutable 
If you create an array, a set, or a dictionary, and assign it to a variable, the collection that’s created will be mutable. 
This means that you can change (or mutate) the collection after it’s created by adding, removing, or changing items in the collection. 
If you assign an array, a set, or a dictionary to a constant, that collection is immutable, and its size and contents can’t be changed.


# Array
An array stores values of the same type in an ordered list.
The same value can appear in an array multiple times at different positions.

Array<Element>
[Element] 

Creating an empty array
var someInts: [Int] = []
someInts.append(3)
someInts = []

Array with default value 
var threeDoubles = Array(repeating: 0.0, count: 3)

Combining two arrays 
var anotherThreeDoubles = Array(repeating: 2.5, count: 3)
var sixDoubles = threeDoubles + anotherThreeDoubles

Array with Array literal 
[<#value 1#>, <#value 2#>, <#value 3#>]
var shoppingList: [String] = ["Eggs", "Milk"]

## Accessing and modifying an Array
You access and modify an array through its methods and properties, or by using subscript syntax.
Use the Boolean "isEmpty" property as a shortcut for checking whether the count property is equal to 0.
You can add a new item to the end of an array by calling the array’s "append(_:)" method
Alternatively, append an array of one or more compatible items with the addition "assignment operator (+=)".
Retrieve a value from the array by using subscript syntax, passing the index of the value you want to retrieve within square brackets immediately after the name of the array.
To insert an item into the array at a specified index, call the array’s "insert(_:at:)" method.
you remove an item from the array with the "remove(at:)" method.
If you try to access or modify a value for an index that’s outside of an array’s existing bounds, 
you will trigger a runtime error. 
If you want to remove the final item from an array, use the removeLast() method

## Interating over an array 
1. for-in loop
for item in shoppingList {
    print(item)
}

2. If you need the integer index of each item as well as its value, use the enumerated() method to iterate over the array instead.
for (index, value) in shoppingList.enumerated() {
    print("Item \(index + 1): \(value)")
}


# Set 
A set stores distinct values of the same type in a collection with no defined ordering.
You can use a set instead of an array when the order of items isn’t important, or when you need to ensure that an item only appears once.
A type must be hashable inorder to save in the set,  that is, the type must provide a way to compute a hash value for itself. 
All of Swift’s basic types (such as String, Int, Double, and Bool) are hashable by default, and can be used as set value types or dictionary key types. 
Enumeration case values without associated values (as described in Enumerations) are also hashable by default.

var letters = Set<Character>()
letters.insert("a")
letters = []

You can also initialize a set with an array literal, as a shorthand way to write one or more values as a set collection.
var favoriteGenres: Set<String> = ["Rock", "Classical", "Hip hop"]

1. How do you find out number of items in a set?
By the read only property of Set that is - "Count"

var favoriteGenres: Set = ["Rock", "Classical", "Hip hop"]
print("I have \(favoriteGenres.count) favorite music genres.")

2. How do you check whether count is 0? 
By "isEmpty" property 

favorites.isEmpty 

3. How can you insert new element to set ?
By "insert(_:)" method 
favorites.insert("Jazz")

4. How can you remove element from a set?
By "remove(_:) method"
If set able to find a method to remove it removes and returns the removed value, if not returns nil"

5. How do you remove all items in the set ?
By "removeAll()" method. 

6. How do you check Set contains particular item?
By "contains(_:) method 

if favoriteGenres.contains("Funk") {
    print("I get up on the good foot.")
} else {
    print("It's too funky in here.")
}

7. How can you iterate over Set?
By for-in loop.
for genre in favoriteGenres {
    print("\(genre)")
}

8. How do you iterate over set in the order?
Use sorted function on set and iterate over the same. 
for genre in favoriteGenres.sorted() {
    print("\(genre)")
}

For more set operations verify, 
https://docs.swift.org/swift-book/documentation/the-swift-programming-language/collectiontypes

Dictionaries
Unordered Collection 
1. What is Dictionary?
A dictionary stores associations between keys of the same type and values of the same type in a collection with no defined ordering.
Each value is associated with a unique key, which acts as an identifier for that value within the dictionary. 
You use a dictionary when you need to look up values based on their identifier.

Dictionary<Key, Value>
Key - type of value that can be used as a dictionary key. 
Value - type of value that dictionary stores for those keys.

You can also write dictionary as, [Key:Value] 

2. How do you create an empty dictionary?
var namesOfIntegers: [Int: String] = [:]

3. What is Dictionary literal?
[<#key 1#>: <#value 1#>, <#key 2#>: <#value 2#>, <#key 3#>: <#value 3#>]

var airports: [String: String] = ["YYZ": "Toronto Pearson", "DUB": "Dublin"]

4. How do you find out the total number of items in Dictionary?
by readly only count property. 
print("The airports dictionary contains \(airports.count) items.")

5. How do you identify whether dictionary has elements?
by "isEmpty" property. 

if airports.isEmpty {
    print("The airports dictionary is empty.")
} else {
    print("The airports dictionary isn't empty.")
}

6. How can you add/update item to a dictionary?
By subscript syntax.
airports["LHR"] = "London"

You can also use subscript syntax to change the value associated with a particular key:
airports["LHR"] = "London Heathrow"

use a dictionary’s updateValue(_:forKey:) method to set or update the value for a particular key.
the updateValue(_:forKey:) method returns the old value after performing an update.

7. How do you retrieve value for Key from dictionary?
You can also use subscript syntax to retrieve a value from the dictionary for a particular key. 

You can use subscript syntax to remove a key-value pair from a dictionary by assigning a value of nil for that key
if let airportName = airports["DUB"] {
    print("The name of the airport is \(airportName).")
} else {
    print("That airport isn't in the airports dictionary.")
}

airports["APL"] = "Apple International"
// "Apple International" isn't the real airport for APL, so delete it
airports["APL"] = nil

8. How can you remove item from dictionary?
From removeValue(forKey:) method.
if let removedValue = airports.removeValue(forKey: "DUB") {
    print("The removed airport's name is \(removedValue).")
} else {
    print("The airports dictionary doesn't contain a value for DUB.")
}

9. How can you iterate over dictionary?
For-in loop.
Each item in the dictionary is returned as a (key, value) tuple.

for (airportCode, airportName) in airports {
    print("\(airportCode): \(airportName)")
}

10. How can you iterate only keys or values of dictionary?
You can also retrieve an iterable collection of a dictionary’s keys or values by accessing its keys and values properties.

for airportCode in airports.keys {
    print("Airport code: \(airportCode)")
}

for airportName in airports.values {
    print("Airport name: \(airportName)")
}

11. How do you retrieve all keys or values in an array?
If you need to use a dictionary’s keys or values with an API that takes an Array instance, initialize a new array with the keys or
values property.

let airportCodes = [String](airports.keys)
// airportCodes is ["LHR", "YYZ"]


let airportNames = [String](airports.values)
// airportNames is ["London Heathrow", "Toronto Pearson"]

12. How do you iterate dictionary values/keys in particular order?
Swift’s Dictionary type doesn’t have a defined ordering. To iterate over the keys or values of a dictionary in a specific order, use the sorted() method on its keys or values property.
