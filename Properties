Properties 
Access stored and computed values that are part of an instance or type.

1. What are properties?
Properties associate values with a particular class, structure, or enumerations. 

2. Define types of properties.
- Stored Properties 
- Computed properties 
- Type properties 

3. What is stored properties?
Stored properties store constant and variable values as part of an instance. 
Provided only by classes and structures. 
Associated with the instance of a particular type. 
Either constant(let) or variable(var) stored properties.
You can provide a default value for a stored property as part of its definition. 
You can also set and modify the initial value for a stored property during initialization.

struct FixedLengthRange {
    var firstValue: Int
    let length: Int
}
var rangeOfThreeItems = FixedLengthRange(firstValue: 0, length: 3)
// the range represents integer values 0, 1, and 2
rangeOfThreeItems.firstValue = 6
// the range now represents integer values 6, 7, and 8

4. Can you modify the properties when structure instance assigned to a constant. 
No, You can't modify the properties of structure instance, when its assigned to the constant, even though declared properties are variables.
This behavior is due to structures being value types. When an instance of a value type is marked as a constant, so are all of its properties.

let rangeOfFourItems = FixedLengthRange(firstValue: 0, length: 4)
// this range represents integer values 0, 1, 2, and 3
rangeOfFourItems.firstValue = 6
// this will report an error, even though firstValue is a variable property

5. Can you modify the properties when class instance assigned to a constant. 
Yes. You can modify the value of variable properties of class instance, even though its assigned to the constant. 
The same isn’t true for classes, which are reference types. If you assign an instance of a reference type to a constant, you can still change that instance’s variable properties.

6. What is Lazy Stored Properties?
A lazy stored properties is a property whose initial value isn't calculated until the first time it's used. 
You indicate a lazy stored property by writing the lazy modifier before its declaration.

7. Should I declare lazy as constant in swift?
No, you should always declare a lazy property as a variable(with var keyword), becuase its initial value might not be retrieved until after instance initailzation completes.
Constant properties must always have a value before initialization completes, and therefore can’t be declared as lazy.

8. When should use lazy property?
1. Initial value for a property is dependent on outside factors whose values aren't known until after an instance's initialization is complete. 
2. When initial value for a property requires complex or computationally expensive setup that shouldn't be performed unless or until it's needed. 

9. Is there thread safety for lazy variables?
If property marked with the lazy modifier is accessed by multiple threads simultaneously and property hasn't yet been initialized,there's no guarantee 
that the property will be initialized only once. 

10. Give example of lazy stored property.
struct Person {
  let name: String 
  let age: Int 
}

struct PeopleViewModel {
let people: [Person]

lazy var oldest: Person? = {
  print("Lazy var oldest initialized")
  return people.max(by: { $0.age < $1.age })
}()

 init(people: [Person]) {
        self.people = people
        print("View model initialized")
    }
}

var viewModel = PeopleViewModel(people: [
    Person(name: "Antoine", age: 30),
    Person(name: "Jaap", age: 3),
    Person(name: "Lady", age: 3),
    Person(name: "Maaike", age: 27)
])

print(viewModel.oldest)
// Prints: "oldest person calculated"
// Prints: Person(name: "Antoine", age: 30)

viewModel.people.append(Person(name: "Jan", age: 69))
print(viewModel.oldest)
// Prints: Person(name: "Antoine", age: 30) // After initailzing variable once, its done. It wont calculate again. 

11. When to use computed property and lazy property?
When you want to consider the actual state of the instance for the calculation, then go for computed property. 
When you dependent only on the current state(which may not modify) then, go for lazy. 

Lazy properties are useful when the initial value for a property is dependent on outside factors whose values aren't known until after 
an initialization is complete.
Lazy properties are also useful when the initial value for a property requires complex or computationally expensive setup that shouldn't
be performed unless or until it's needed. 

12. Are lazy stored properties are mutable?
Yes. Lazy properties are mutable. 
This means you can only call lazy variables on mutable structs.
let viewModel = PeopleViewModel(people: [
Person (name: "Antoine", age: 30),
Person(name: "Jaap", age: 3),
Person (name: "Lady", age: 3),
Person (name: "Maaike", age: 27)
1)
print(viewModel.oldest)
// Error: Cannot use mutating getter on immutable value: ‘viewModel’ is a ‘let’ constant
This is only the case for value types, in this case, a struct. If our view model would’ve been a class, this error wouldn’t occur. 

13. What is computed properties?
Computed properties calcute values. 
Provided by classes,structures and enumerations. 
Associated with the instance of a particular type. 

Computed properties don't store values, instead they compute values. Provide a getter and an optional setter to retrieve and set other peoperties and values indirectly. 

struct Point {
    var x = 0.0, y = 0.0
}
struct Size {
    var width = 0.0, height = 0.0
}
struct Rect {
    var origin = Point()
    var size = Size()
    var center: Point {
        get {
            let centerX = origin.x + (size.width / 2)
            let centerY = origin.y + (size.height / 2)
            return Point(x: centerX, y: centerY)
        }
        set(newCenter) {
            origin.x = newCenter.x - (size.width / 2)
            origin.y = newCenter.y - (size.height / 2)
        }
    }
}
var square = Rect(origin: Point(x: 0.0, y: 0.0),
    size: Size(width: 10.0, height: 10.0))
let initialSquareCenter = square.center
// initialSquareCenter is at (5.0, 5.0)
square.center = Point(x: 15.0, y: 15.0)
print("square.origin is now at (\(square.origin.x), \(square.origin.y))")
// Prints "square.origin is now at (10.0, 10.0)"

14. What is shorthand setter declaration?
If a computed property’s setter doesn’t define a name for the new value to be set, a default name of newValue is used.
struct AlternativeRect {
    var origin = Point()
    var size = Size()
    var center: Point {
        get {
            let centerX = origin.x + (size.width / 2)
            let centerY = origin.y + (size.height / 2)
            return Point(x: centerX, y: centerY)
        }
        set {
            origin.x = newValue.x - (size.width / 2)
            origin.y = newValue.y - (size.height / 2)
        }
    }
}

15. Explain shorthand getter declaration.
If the entire body of a getter is a single expression, the getter implicitly returns that expression. 
struct CompactRect {
    var origin = Point()
    var size = Size()
    var center: Point {
        get {
            Point(x: origin.x + (size.width / 2),
                  y: origin.y + (size.height / 2))
        }
        set {
            origin.x = newValue.x - (size.width / 2)
            origin.y = newValue.y - (size.height / 2)
        }
    }
}

16. What is read-only computed property?
A computed property with a getter but no setter is known as a read-only computed property.
A read-only computed property always returns a value, and can be accessed through dot syntax, but can’t be set to a different value.

You must declare computed properties — including read-only computed properties — as variable properties with the var keyword, 
because their value isn’t fixed. The let keyword is only used for constant properties,
to indicate that their values can’t be changed once they’re set as part of instance initialization.

You can simplify the declaration of a read-only computed property by removing the get keyword and its braces.
struct Cuboid {
    var width = 0.0, height = 0.0, depth = 0.0
    var volume: Double {
        return width * height * depth
    }
}
let fourByFiveByTwo = Cuboid(width: 4.0, height: 5.0, depth: 2.0)
print("the volume of fourByFiveByTwo is \(fourByFiveByTwo.volume)")
// Prints "the volume of fourByFiveByTwo is 40.0"

17. Explain Property Observers?
Property observers observe and respond to changes in a property's value. Property observers are called everytime a property's value is set, 
even if the new value is the same as the property's current value. 

18. Where you can add property observers?
1. Stored properties that you define
2. Stored properties that you inherit 
3. Computed properties that you inherit 

19. What are two property observers?
1. "willSet" is called just before the value is stored.
2. "didSet" is called immediately after the new value is stored. 

20. Give example of willSet and didSet property observer. 
class StepCounter {
 var totalSteps: Int = 0 {
  willSet(newTotalSteps) {
      print("About to set totalSteps to \(newTotalSteps)")
  }
  didSet {
    if totalSteps > oldValue  {
         print("Added \(totalSteps - oldValue) steps")
        }
      }
    }
}
let stepCounter = StepCounter()
stepCounter.totalSteps = 200
// About to set totalSteps to 200
// Added 200 steps
stepCounter.totalSteps = 360
// About to set totalSteps to 360
// Added 160 steps
stepCounter.totalSteps = 896
// About to set totalSteps to 896
// Added 536 steps

21. What is oldValue parameter in didSet?
The didSet observer doesn’t provide a custom parameter name for the old value, and the default name of oldValue is used instead.

22. In case of in-out parameter will the property observers called everytime?
Yes. If you pass a property that has observers to a function as an in-out parameter, the willSet and didSet observers are always called.
This is because of the copy-in copy-out memory model for in-out parameters: The value is always written back to the property at the end of the function.

23. What is property wrappers?
Use a property wrapper to reuse code in the getter and setter of multiple properties. 
A property wrapper adds a layer of seperation between code that manages how a property is stored and code that defines a property. 
When you write the managment code once when you define the wrapper, and then reuse that managment code by applying it to multiple properties. 
Associated logic that triggered everytime when value is modified.These kind of logic we can directly write into property, with the help of property wrappers.
Basically, property wrapper is essentially a type that wraps a given value in order to attach additional logic to it. 
It can be implemented with struct, enum and classes. 

24. What are the benefits of property wrappers?
Code resue and generalization. 
Code reuse and customizability, and enables powerful new ways to implement property-level functionality. 
One of the major benefits of property wrappers is that they enable us to add logic and behaviors to properties in a way that doesn’t impact our call sites at all — 
as values are read and written the exact same way regardless of whether a property is wrapped or not.

1. Data validation.
2. Automatically applying transformations. 
3. Centralizing property logic.

25. Drawback of property wrapper?
 On the other hand, the risk is that we’ll end up hiding too much functionality behind what might be a quite non-obvious abstraction.

26. Explain Property Wrappers with the example.
1. mention @propertyWrapper attribute before struct/class/enum
2. should contain stored property called - "wrappedValue", which tells swift which underlying value that's being wrapped. 
@propertyWrapper 
struct Capitalized {
var wrappedValue: String {
didSet { wrappedValue = wrappedValue.capitalized } 
}
init(wrappedValue: String) {
self.wrappedValue = wrappedValue.capitalized
}
}

Struct User {
 @Capitalized var firstName: String 
 @Capitalized var lastName: String 
}

var user = User(firstName: "nivedita", lastName: "angadi")
// Nivedita Angadi 

user.lastName = "a"
// Nivedita A

We can even natively assign default values to our wrapped properties
struct Document {
    @Capitalized var name = "Untitled document"
}

2. The setter ensures that new values are less than or equal to 12, and the getter returns the stored value.
@propertyWrapper 
struct TwelveOrLess {
private var number = 0 
var wrappedValue: Int {
get { return number }
set { number = min(newValue, 12) }
}
}
struct SmallRectangle {
@TwelveOrLess var height: Int 
@TwelveOrLess var width: Int 
}

var rectangle = SmallRectangle() 
print(rectangle.height)
// prints "0"

rectangle.height = 24 
print(rectangle.height)
//prints 12 

27. What happens internally when you apply the property wrapper?
When you apply a wrapper to a property, the compiler synthesizes code that provides storage for the wrapper and code that provides access to the property 
through the wrapper. 
The property wrapper responsible for storing the wrapped value, so there's no synthesized code for that. 

28. Can you provide the initial values for wrapped properties?
Yes. You can provide initial values via initializers. 
@propertyWrapper 
struct SmallNumber {
 private var maximum: Int 
 private var number: Int 

 var wrappedValue: Int {
    get { return number } 
    set { number = min(newVlaue, maximum) } 
 } 

 init() {
maximum = 12 
number = 0 
 }

init(wrappedValue: Int) {
maximum = 12
number = min(wrappedValue, maximum) 
}

init(wrappedValue: Int, maximum: Int) {
self.maximum = maximum 
number = min(wrappedValue, maximum)
}
}

struct ZeroRectangle {
@SmallNumber var height: Int 
@SmallNumber var width: Int 
}

var zeroRectangle = ZeroRectangle()
print(zeroRectangle.height, zeroRectangle.width)

struct UnitRectangle {
  @SmallNumber var height: Int = 1
  @SmallNumber var width: Int = 1
}

var unitRectangle = UnitRectangle()
print(unitRectangle.height, unitRectangle.width)

// init(wrappedValue:) will get called. 

struct NarrowRectangle {
 @SmallNumber(wrappedValue: 2, maximum: 5) var height: Int 
 @SmallNumber(wrappedValue: 3, maximum: 4) var width: Int
}

var narrowRectangle = NarrowRectangle()
print(narrowRectangle.height, narrowRectangle.width)
// Prints "2, 3"

narrowRectangle.height = 100 
narrowRectangle.width = 100 
print(narrowRectanagle.height, narrowRectangle.width)
// Prints "5, 4"

29. What is Projected value in property wrapper?
Sometimes we want to access the property wrapper iteself, instead of value that it's wrapping. 
The name of the projected value is same as the wrapped value, except it begins with $. 
Because your code can’t define properties that start with $ the projected value never interferes with properties you define. Its basically 
explosing property warppers it self. 

30. What are global varibales?
Global variables are variables that are defined outside of any function, method, closure, or type context. 
Global constants and variables are always computed lazily, in a similar manner to Lazy Stored Properties. 
Unlike lazy stored properties, global constants and variables don’t need to be marked with the lazy modifier.

31. What are Local variables?
Local variables are variables that are defined within function, method or closure context. 
Local constants and variables are never computed lazily.

32. What are stored variables?
Stored properties, provide storage for a value of a certain type and allow that value to be set and retrieved. 

33. What are computed variables?
Computed variables calculate their value, rather than storing it, and they’re written in the same way as computed properties.

34. Can you apply property wrapper to the global variables?
No, you can not. 
You can apply a property wrapper to a local stored variable, but not to a global variable or a computed variable.

35. What is type properties?
Properties are belongs to the type itself, not to any one instance of that type.
There will only ever be one copy of these properties, no matter how many instances of that type you create.

Type properties are useful for defining values that are universal to all instances of a particular type, 
such as a constant property that all instances can use (like a static constant in C), 
or a variable property that stores a value that’s global to all instances of that type (like a static variable in C).

Stored type properties can be variables or constants.
Computed type properties are always declared as variable properties, in the same way as computed instance properties.

36. Explain about stored type property.
Unlike stored instance properties, you must always give stored type properties a default value. 
This is because the type itself doesn’t have an initializer that can assign a value to a stored type property at initialization time.
Stored type properties are lazily initialized on their first access. 
They’re guaranteed to be initialized only once, even when accessed by multiple threads simultaneously, 
and they don’t need to be marked with the lazy modifier.

37. How do you define the type property?
You define type properties with the static keyword.
For computed type properties for class types, you can use the class keyword instead to allow subclasses to override the superclass’s implementation. 

38. Give example of type properties.
struct SomeStructure {
    static var storedTypeProperty = "Some value."
    static var computedTypeProperty: Int {
        return 1
    }
}
print(SomeStructure.storedTypeProperty)
// Prints "Some value."
SomeStructure.storedTypeProperty = "Another value."
print(SomeStructure.storedTypeProperty)
// Prints "Another value."

enum SomeEnumeration {
    static var storedTypeProperty = "Some value."
    static var computedTypeProperty: Int {
        return 6
    }
}
print(SomeEnumeration.computedTypeProperty)
// Prints "6"

class SomeClass {
    static var storedTypeProperty = "Some value."
    static var computedTypeProperty: Int {
        return 27
    }
    class var overrideableComputedTypeProperty: Int {
        return 107
    }
}
print(SomeClass.computedTypeProperty)
// Prints "27"

39. How does lazy property differ from a regular stored property?
1. Initializing timing
  - Regular stored properties are initialised when the instance is created 
  - Lazy properties are initialized only when accessed for the first time. 
2. Memory Usage 
 - A lazy property saves memory if the property is computationally expensive or not always used 
3. Declaration 
 - lazy properties must be declared as var because their value may change after initialization. 

40. Can a computed property have property observers (willSet and didSet)? Why or why not?
No, computed properties cannot have property observers because their value is not stored directly. 
Instead, you can observe changes by overriding the computed property’s getter or setter.

struct Rectangle {
    var width: Double = 0.0
    var height: Double = 0.0
    var area: Double {
        get {
            return width * height
        }
        set {
            width = sqrt(newValue) // Example logic
            height = sqrt(newValue)
            print("Area updated, new dimensions are \(width) x \(height)")
        }
    }
}

var rect = Rectangle()
rect.area = 25.0 // Triggers the setter

41. How do property attributes like @Published and @State differ?
@Published:
	• Used in combination with ObservableObject for binding data in a SwiftUI environment.
	• Triggers updates when the value changes.

class Model: ObservableObject {
    @Published var data: String = "Hello"
}

@State:
	• Used for local state in SwiftUI views. Does not trigger updates to external views or objects.

struct ContentView: View {
    @State private var counter = 0
    var body: some View {
        Button("Tap Me") {
            counter += 1
        }
    }
}

42. What are the default values for properties in Swift?
Properties must be initialized during declaration or in the initializer. However:
	• Optional properties default to nil.
	• Static properties can have default values.

struct User {
    var name: String = "Guest" // Default value
    var age: Int? // Defaults to nil
}

Refernce:
https://www.swiftbysundell.com/articles/property-wrappers-in-swift/
https://docs.swift.org/swift-book/documentation/the-swift-programming-language/properties
