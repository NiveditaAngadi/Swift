Swift 6

1. Strict Concurrency Checking 
Strict concurrency checking in the Swift 6 language mode helps you find and fix data races at compile time.
Overlapping access to shared mutable state creates the risk for data races. Data races can cause your app to crash, misbehave,
or corrupt user data. Because data races depend on the ordering of concurrent operations, they can be very difficult to reproduce and debug. 
Strict concurrency checking lets you confirm, when you compile your app, that its code is free from data races. When you identify a data race, 
you fix it by eliminating overlapping access, shared access, or mutable state.
