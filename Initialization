Set the initial values for a type's stored properties and perform one-time setup. 

1. What is initialization?
Initialization is the process of preparing class, structure, enumeration for use. This process involves setting an initial value for each stored property on that instance and performing
any other setup or initailzation that required before the new instance is ready for use. 

2. Does swift initializer returns a value?
No

3. What is deinitializer?
Method which performs any custom cleanup just before an instance of that class is deallocated. 

4. Is it compulasary to set an intial value to stored property by the time an instance of that class or structure is created?
Yes. Stored property can not be left indeterminate state. 

5. What are the ways for setting value to the stored property?
1. You can set value to the stored property within an initializer. 
2. By assigning a default property value as part of the property's definition. 

6. Property of optional type are initialized to what value?
Property of optional type are automatically initialized to nil. 

7. Can you modify the value of constant property, once its value is assigned?
No. 

8. What is default initializer?
Swift provides a default initializer for any structure or class that provides default values for all of its properties. 
The default initializer simply creates a new instance with all of its properties set to their default values.

9. What is memberwise initializer for structure types?
Structure types automatically receive a memberwise initializer if they don’t define any of their own custom initializers. 
The memberwise initializer is a shorthand way to initialize the member properties of new structure instances.
Initial values for the properties of the new instance can be passed to the memberwise initializer by name.

10. What is initializer delegation?
Initializers can call other initializers to perform part of an instance's initialization. This process known as initialiser delegation. 
This avoids duplicating code across multiple initializers. 

11. What is value type initializer delegation?
In value type initializer delgation is relatively simple. Since, it won't support the inheritance, they can only delegate another initializer that they provide themselves. 
For value types, you use self.init to refer to other initializers from the same value type when writing your own custom initializers. 
You can call self.init only from within an initializer.

12. Can we call memberwise initializer, if define the custom initializer?
Note that if you define a custom initializer for a value type, 
you will no longer have access to the default initializer (or the memberwise initializer, if it’s a structure) for that type. 
This constraint prevents a situation in which additional essential setup provided in a more complex initializer is accidentally circumvented by 
someone using one of the automatic initializers.

13. Explain about the class's intialization.
All of a class's stored properties - including any properties the class inherits from its superclass - must be assigned as initial value during initialization. 

14. How swift makes sure all stored properties of class initialized?
Swift defines two kinds of initializers for class types to help all stored properties receive an initial value. 
These are known as designated initializers and convenience initializers. 

15. What is designated initializers?
Designated initializers are the primary initializers for a class. 
A designated initializer fully initializes all properties introduced by that class 
and calls an appropriate superclass initializer to continue the initialization process continues up the superclass chain. 

init(<#parameters#>) {
<#statements#>
}

16. What is conveniece initializers?
Convenience initializers are secondary initializers for a class.
You can define a convenience initializers to call a designated initilizer from the same class as the convenience initializers 
with some of the designated initializers parameters set to defalut values. 
You can also define a convenience initializer to create an instance of that class for a specific use case or input value type.
Providing the convenience initializer is optional/need basis. 

convenience init(<#parameters#>) {
<#statements#>
}

17. Explain rules in initializer delegation for class types.
To simplify the relationships between designated and convenience initializers, swift applies 3 rules for delegation class between initializers, 
Rule 1: 
A designated initializer must call a designated initializer from its immediate superclass.

Rule 2: 
A convenience initializer must call another initializer from the same class.

Rule 3:
A convenience initializer must ultimately call a designated initializer.

A simple way to remember this is:
Designated initializers must always delegate up.
Convenience initializers must always delegate across.

18. What is two-phase initialization?
Class initialization in Swift is a two-phase process. 
In the first phase, each stored property is assigned an initial value by the class that introduced it. 
Once the initial state for every stored property has been determined,
the second phase begins, and each class is given the opportunity to customize its stored properties further before the new instance is considered ready for use. 

19. Why two-phase initialization?
The use of two-phase initialization process makes initialization safe, while still giving complete flexibility to each class in a class hierarchy. 
Two-phase initialization prevents property values from being accessed before they’re initialized,
and prevents property values from being set to a different value by another initializer unexpectedly.

20. By default swift initializers are inherited in class?
No. Swift subclasses don't inherit their superclass initializers by default. 
Swift’s approach prevents a situation in which a simple initializer from a superclass is inherited by a more specialized subclass and is used to create a new instance of the subclass 
that isn’t fully or correctly initialized.

21. What will be the solution if subclass present same initializers as its superclass?
Provide the custom implementation of those initializers within the subclass. 
When you write a subclass initializer that matches a superclass designated initializer, 
you are effectively providing an override of that designated initializer. 
Therefore, you must write the override modifier before the subclass’s initializer definition. 
Note that, 
Conversely, if you write a subclass initializer that matches a superclass convenience initializer, 
that superclass convenience initializer can never be called directly by your subclass, 
as per the rules described above in Initializer Delegation for Class Types. Therefore, 
your subclass is not (strictly speaking) providing an override of the superclass initializer. 
As a result, you don’t write the override modifier when providing a matching implementation of a superclass convenience initializer.

22. In which case subclass can automatically inherit super class initializers?
Subclasses don’t inherit their superclass initializers by default. However, superclass initializers are automatically inherited if certain conditions are met.
Assuming that you provide default values for any new properties you introduce in a subclass, the following two rules apply:
Rule 1:
If your subclass doesn’t define any designated initializers, it automatically inherits all of its superclass designated initializers.

Rule 2: 
If your subclass provides an implementation of all of its superclass designated initializers — either by inheriting them as per rule 1, 
or by providing a custom implementation as part of its definition — then it automatically inherits all of the superclass convenience initializers.

23. What is Failable initializers?
There are cases where initialization may fail due to invalid initialization parameter values, 
the absence of a required external resource, or some other condition that prevents initialization
from succeeding.

To cope with initialization conditions that can fail, define one or more failable initializers as part of a class, 
structure, or enumeration definition. 
You write a failable initializer by placing a question mark after the init keyword (init?).

Note:
You can’t define a failable and a nonfailable initializer with the same parameter types and names.

A failable initializer creates an optional value of the type it initializes. 
You write return nil within a failable initializer to indicate a point at which initialization failure can be triggered.

24. Enumeration with raw value - explain the failable initializer 
Enumerations with raw values automatically receive a failable initializer, init?(rawValue:), 
that takes a parameter called rawValue of the appropriate raw-value type and selects a matching enumeration case if one is found, 
or triggers an initialization failure if no matching value exists.

25. Explain propogation of Initialization failure. 
A failable initializer of a class, structure, or enumeration can delegate across to another failable initializer from the same class, structure,
or enumeration. 
Similarly, a subclass failable initializer can delegate up to a superclass failable initializer. 

In either case, if you delegate to another initializer that causes initialization to fail, the entire initialization process fails immediately, 
and no further initialization code is executed.

26. Can you override the failiable initializer?
Yes. Subclass can override the failiable initializer of the the superclass. 
Nonfailiable initializer of the subclass can override the failiable initializer of the the superclass and only way to delegate 
up to the superclass initializer is to force-unwrap the result of the failiable superclass initializer. 

27. How do you make sure that subclass must implement initializer of superclass?
By "required" modifier before the definition of a class initializer to indicate that every subclass of the class must implement that initializer. 
You must also write the required modifier before every subclass implementation of a required initializer, 
to indicate that the initializer requirement applies to further subclasses in the chain. 
You don’t write the override modifier when overriding a required designated initializer:

class SomeClass {
    required init() {
        // initializer implementation goes here
    }
}

class SomeSubclass: SomeClass {
    required init() {
        // subclass implementation of the required initializer goes here
    }
}

28. How do you set the property vlaue by closure or definition?
class SomeClass {
    let someProperty: SomeType = {
        // create a default value for someProperty inside this closure
        // someValue must be of the same type as SomeType
        return someValue
    }()
}

Note that the closure’s end curly brace is followed by an empty pair of parentheses. 
This tells Swift to execute the closure immediately. If you omit these parentheses, 
you are trying to assign the closure itself to the property, and not the return value of the closure.

29. Why use private initializers in Swift?
A private initializers in Swift restricts the creation of an object to within its defining scope. This is particularly useful in scenarios where you 
want to control or limit how and when an instance of a class or structure is created. 

Private initializers are a powerful tool in Swift for controlling object creation. 
They are essential in patterns like singletons, factory methods, and utility classes, and help ensure proper encapsulation and design consistency.

1. Singleton Pattern 
Private initializer ensures that only one instance of a class in created by restricting external instantiation. This is the foundation of Singleton pattern. 

class Signleton {
    static let shared = Signleton()

    private init() {
      print("Singleton instance created")
    }
}

The private initializer enforces the singleton pattern by disallowing other parts of the code from creating new instances of the class.

2. Utility Classes
If a class is designed to contain only static method and property, a private initializer prevents it from being instantiated unnecessarily. 
A private initializer ensures the class is used as intended—a container for utility methods—and prevents accidental instantiation.

class MathUtilities {
    private init() {} // Prevent instantiation
    
    static func add(_ a: Int, _ b: Int) -> Int {
        return a + b
    }
}

// Usage:
let sum = MathUtilities.add(5, 3)
// let utility = MathUtilities() // Error: 'MathUtilities' initializer is inaccessible

3. Restrict initialization in Frameworks or Libraries
When creating frameworks or libraries, private initializers can restrict the creation of objects, exposing only the intended API's to user. 
This prevents external developers from creating instances of internal helper classes that aren’t part of the intended API.

public class LibraryHelper {
    private init() {} // Internal-only usage
    
    public static func fetchVersion() -> String {
        return "1.0.0"
    }
}

4.  Custom Factory Methods
A private initializer can enforce the use of factory methods to create objects, allowing for more controlled instantiation.
By using private initializers, the class can manage its instantiation process, ensuring only predefined types are created.

class Vehicle {
    let type: String
    
    private init(type: String) { // Only accessible within the class
        self.type = type
    }
    
    static func createCar() -> Vehicle {
        return Vehicle(type: "Car")
    }
    
    static func createBike() -> Vehicle {
        return Vehicle(type: "Bike")
    }
}

// Usage:
let car = Vehicle.createCar()
let bike = Vehicle.createBike()
// let vehicle = Vehicle(type: "Truck") // Error: 'init(type:)' is inaccessible

5. Immutable Shared Constants
A private initializer can be used to enforce immutability for shared constants or settings.
This ensures the settings are immutable and consistent across the app.

struct AppSettings {
    static let shared = AppSettings() // Shared instance
    
    private init() {} // Prevent external instantiation
    
    let appName = "MyApp"
    let version = "1.0"
}

// Usage:
let settings = AppSettings.shared
print(settings.appName)
// let newSettings = AppSettings() // Error: 'AppSettings' initializer is inaccessible


30. Benefits of Private Initializers.
Benefits of Private Initializers
	1.	Encapsulation: Restricts external access, enforcing intended use.
	2.	Control: Centralizes instance creation logic, reducing the risk of misuse.
	3.	Optimization: Ensures that resources like singletons or utility classes are not unnecessarily instantiated.
	4.	Cleaner API: Prevents users of a framework or library from misusing internal classes.

31. 
