Subclass to add or override functionality. 

1. What is inheritance? 
A class can inherit methods, properties, and other characteritics from another class. 
When one class inherits from another, the inheriting class is known as a subclass, and the class it inherits from is known as its superclass. 

2. What are the behavior of subclass when override methods, properties, subscripts?
Classes in Swift can call and access methods, properties, and subscripts belonging to their superclass and can provide their own overriding versions of those methods, 
properties, and subscripts to refine or modify their behavior. Swift helps to ensure your overrides are correct by checking that the override definition has a matching 
superclass definition.

3. What are the rules for defining the property observers?
Classes can also add property observers to inherited properties in order to be notified when the value of a property changes. Property observers can be added to any property, regardless of
whether it was originally defined as a stored or computed property. 

4. What is base class?
Any class that doesn't inherit from another class known as a base class. 

class Vehicle {
var currentSpeed = 0.0 
var description: String {
  return "traveling at \(currentSpeed) miles per hour" 
}

func makeNoise() {
}
}

5. What is sub classing?
Subclassing is the act of basing a new class on an existing class. 
The subclass inherits characteristics from the existing class, which you can then refine. You can also add new characteristics to the subclass.

class Bicycle: Vehicle {
}

The new bicycle class automatically gains all of the characteristics of Vehicle, such as its current speed and descrption properties and its makeNoise() method. 

6. What is overriding?
A subclass can provide its own custom implementation of an instance method, type method, instance property, type property, or subscript that it would otherwise inherit from a superclass. This is known as 
overriding. 
You prefix your overriding definition with the "override" keyword. 

7. How do you access the superclass version of a method, properties or subscripts?
By using "super" prefix. 

8. 


