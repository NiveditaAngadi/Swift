Structure your code with branches, loops and early-exit. 

1. List the control flow statments supported in Swift?
 a. while ->  perform tasks multiple times 
 b. if, guard, switch -> to execute different branches of code based on certain conditions
 c. brake and continue -> To transfer the flow of execution to another point in your code. 
 d. for-in -> iterate over arrays, dictionaries, ranges, strings, and other sequences
 e. defer -> wrap code to be executed when leaving the current scope

2. Explain Switch statement in Swift?
Considerably more powerful than its counterpart. 
1. Cases can match many different patterns, including interval matches, tuples, and casts to a specific type
2. Matched values in a switch case can be bound to temporary constants or variables for use within the case’s body.
3. Complex matching conditions can be expressed with a where clause for each case.

3. Explain for-in loop.
You use the for-in loop to iterate over a sequence, such as items in an array, ranges of numbers, or characters in a string.
let names = ["Anna", "Alex", "Brian", "Jack"]
for name in names {
    print("Hello, \(name)!")
}
// Hello, Anna!
// Hello, Alex!
// Hello, Brian!
// Hello, Jack!

You can also iterate over a dictionary to access its key-value pairs. Each item in the dictionary is returned as a (key, value) tuple when the dictionary is iterated.
let numberOfLegs = ["spider": 8, "ant": 6, "cat": 4]
for (animalName, legCount) in numberOfLegs {
    print("\(animalName)s have \(legCount) legs")
}
// cats have 4 legs
// ants have 6 legs
// spiders have 8 legs

You can also use for-in loops with numeric ranges. This example prints the first few entries in a five-times table:
for index in 1...5 {
    print("\(index) times 5 is \(index * 5)")
}
// 1 times 5 is 5
// 2 times 5 is 10
// 3 times 5 is 15
// 4 times 5 is 20
// 5 times 5 is 25

4. What is stride(from: to: by:)
In order to escape in between iterations mentioned by "by". 
For example:
let minutes = 60
for tickMark in 0..<minutes {
    // render the tick mark each minute (60 times)
}

let minuteInterval = 5
for tickMark in stride(from: 0, to: minutes, by: minuteInterval) {
    // render the tick mark every 5 minutes (0, 5, 10, 15 ... 45, 50, 55)
}

Closed ranges are also available, by using stride(from:through:by:) instead:
let hours = 12
let hourInterval = 3
for tickMark in stride(from: 3, through: hours, by: hourInterval) {
    // render the tick mark every 3 hours (3, 6, 9, 12)
}

5. Explain while
A while loop starts by evaluating a single condition. If the condition is true, a set of statements is repeated until the condition becomes false.
while <#condition#> {
   <#statements#>
}

6. When you need to use while?
These kinds of loops are best used when the number of iterations isn’t known before the first iteration begins. 

7. Various types of while in swift. 
a. while evaluates its condition at the start of each pass through the loop.
b. repeat-while evaluates its condition at the end of each pass through the loop: The repeat-while loop in Swift is analogous to a do-while loop in other languages.


8. Conditional statements
If, Switch, 

9. What is if expression in Swift?
You retrieve the result in instance. 
For example,
let weatherAdvice = if temperatureInCelsius <= 0 {
    "It's very cold. Consider wearing a scarf."
} else if temperatureInCelsius >= 30 {
    "It's really warm. Don't forget to wear sunscreen."
} else {
    "It's not that cold. Wear a T-shirt."
}


print(weatherAdvice)
// Prints "It's not that cold. Wear a T-shirt."

let freezeWarning: String? = if temperatureInCelsius <= 0 {
    "It's below freezing. Watch for ice!"
} else {
    nil
}

let freezeWarning = if temperatureInCelsius <= 0 {
    "It's below freezing. Watch for ice!"
} else {
    nil as String?
}

let weatherAdvice = if temperatureInCelsius > 100 {
    throw TemperatureError.boiling
} else {
    "It's a reasonable temperature."
}
10. Explain switch in Swift. 
In contrast with switch statements in C and Objective-C, switch statements in Swift don’t fall through the bottom of each case and into the next one by default. 
Instead, the entire switch statement finishes its execution as soon as the first matching switch case is completed, without requiring an explicit break statement. 

You can make a compound case in switch.
This makes the switch statement safer and easier to use than the one in C and avoids executing more than one switch case by mistake.Values in switch cases can be checked for their inclusion in an interval. This example uses number intervals to provide a natural-language count for numbers of any size

let anotherCharacter: Character = "a"
switch anotherCharacter {
case "a", "A":
    print("The letter A")
default:
    print("Not the letter A")

Interval Matching:
Values in switch cases can be checked for their inclusion in an interval. This example uses number intervals to provide a natural-language count for numbers of any size:

let approximateCount = 62
let countedThings = "moons orbiting Saturn"
let naturalCount: String
switch approximateCount {
case 0:
    naturalCount = "no"
case 1..<5:
    naturalCount = "a few"
case 5..<12:
    naturalCount = "several"
case 12..<100:
    naturalCount = "dozens of"
case 100..<1000:
    naturalCount = "hundreds of"
default:
    naturalCount = "many"
}
print("There are \(naturalCount) \(countedThings).")
// Prints "There are dozens of moons orbiting Saturn."



