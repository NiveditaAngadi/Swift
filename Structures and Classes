Structures and Classes are general-purpose, flexible constructs that become the building blocks of program's code. 

In swift, structures and classes are defined in the single file. 

1. Explain the common features in structures and classes.
a. Define properties to store values 
b. Define methods to provide functionality 
c. Define subscripts to provide access to their values using subscript syntax
d. Define initializers to set up their initial values. 
e. Be extended to expand their functionality beyond a default implementations. 
f. confirm to protocols to provide standard functionality of a certain kind. 

2. What are the additional functionality of Classes compare to structures. 
a. Inheritance enables one class to inherit the characteristics of another 
b. Type casting enables you to check and interpret the type of a class instance at runtime. 
c. Deinitializers enable an instance of a class to free up any resources it has assigned. 
d. Reference counting allows more than one reference to a class instance. 

3. Why structures compare to classes?
Local reasoning will be complex in case of classes. 
Capabilities that class support come at the cost of increased complexity. 

4. Explain the syntax of structure. 
Whenever you define a new structure or class, you define a new Swift type
struct SomeStructure {
    // structure definition goes here
}

5. Explain the syntax of class. 
class SomeClass {
    // class definition goes here
}

6. How do you create instance of structure or class?
let someResolution = Resolution()
let someVideoMode = VideoMode()

7. How do you access the property of a struct or class?
You can access the properties of an instance using dot syntax. In dot syntax, 
you write the property name immediately after the instance name, separated by a period (.), without any spaces

print("The width of someResolution is \(someResolution.width)")
// Prints "The width of someResolution is 0"

8. Does class has memberwise default intitaliser?
Unlike structures, class does not have memberwise default initialiser.

9. Explain value type.
A value type is a type whose value is copied when it's assigned to a variable or constant, or when it's passed to a function. 
Structure and Enumeration are value types. 

10. Explain swift optimazation techniques while copying value type.
Collections defined by the Swift standard library like arrays, dictionaries, and strings use an optimization to reduce the performance cost of copying. Instead of making a copy immediately, these collections share the memory where the elements are stored between the original instance and any copies. If one of the copies of the collection is modified, the elements are copied just before the modification. 
The behavior you see in your code is always as if a copy took place immediately.

11. Explain about reference type. 
Classes, actors and closures are reference types. 
Unlike value types, reference types are not copied when they’re assigned to a variable or constant, 
or when they’re passed to a function. Rather than a copy, a reference to the same existing instance is used.
Effectively, they’re just two different names for the same single instance.

12. Explain about identity operator
It can sometimes be useful to find out whether two constants or variables refer to exactly the same instance of a class.
To enable this, Swift provides two identity operators:
Identical to (===)
Not identical to (!==)
Use these operators to check whether two constants or variables refer to the same single instance.
 Identical to means that two constants or variables of class type refer to exactly the same class instance. Equal to means that two instances are considered equal or equivalent in value, 


