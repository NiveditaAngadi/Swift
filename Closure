Closures
Group code that executes together, without creating a named function. 

1. What is closure?
Closures are self-contained blocks of functionality that can be passed around and used in your code. 
Its simillar to block in another programming language. 

2. What is closing over?
Closures can capture and store references to any constants and variables from the context in which they're defined. This is known as closing over those constants and variables. 
Swift handles all of the memory management of capturing for you. 

3. Explain different forms of closures.
Closure can take one of the three forms. 
  1. Global functions are closures that have a name and don't capture any values. 
  2. Nested functions are closures that have a name and can capture values from their enclosing function. 
  3. Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context. 

4. Various optimazations for closures. 
  1. Inferring parameter and return vlaue types from context.
  2. Implicit return from single-expression closures. 
  3. Short-hand argument names 
  4. Trailing closure syntax

5. What is closure expression?
   Closure expressions are unnamed closures written in a 
   lightweight syntax that can capture values from their surrounding context. 
   Closure expressions are a way to write inline closures in a brief, focused syntax. 

6. What is Closure Expression Syntax?
    { (<#parameters#>) -> <#return type#> in 
       <#statements#>
    }

7. What is trailing closures? 
If you need to pass a closure expression to a function as the function’s final argument and the closure expression is long, it can be useful to write it as a trailing closure instead

func someFunctionThatTakesAClosure(closure: () -> Void) {
    // function body goes here
}


// Here's how you call this function without using a trailing closure:


someFunctionThatTakesAClosure(closure: {
    // closure's body goes here
})


// Here's how you call this function with a trailing closure instead:


someFunctionThatTakesAClosure() {
    // trailing closure's body goes here
}

8. Explain the capturing concept of closure
A closure can capture constants and variables from the surrounding context in which it's defined. The closure can then refer to and modify the values of those constants and variabels 
from within its body, even if the original scope that defined constants and variables no longer exists. 

9. Closure is reference or value type?
Closure is reference type. Functions and closures are reference types.
Whenever you assign a function or a closure to a constant or a variable, you are actually setting that constant or variable to be a reference to the function or closure.
If you assign a closure to two different constants or variables, both of those constants or variables refer to the same closure. 

10. What is esacping closure?
A closure is said to escape a function when closure is passed as an argument to the function, but is called after the function returns.
When you declare a function that takes a closure as one of its parameters, you can write @escaping before the parameter’s type to indicate that the closure is allowed to escape.

11. Ways of escaping the closure.
One way that a closure can escape is by being stored in a variable that’s defined outside the function.

As an example, many functions that start an asynchronous operation take a closure argument as a completion handler. 
The function returns after it starts the operation, but the closure isn’t called until the operation is completed — the closure needs to escape, to be called later. For example:

var completionHandlers: [() -> Void] = []
func someFunctionWithEscapingClosure(completionHandler: @escaping () -> Void) {
    completionHandlers.append(completionHandler)
}
11. Why closure needs to be escaped?
In order to call it later. 

12. What is @autoclosure?
As per name - it creates closure automatically from an argument passed to a function. 
Turning an argument into a closure allows us to delay the actual request of the argument.
@autoclosure in Swift is a type of closure that allows to omit braces and make it look like a normal expression.

func printTest1(_ result: () -> Void) {
    print("Before")
    result()
    print("After")
}

printTest1({ print("Hello") })

func printTest2(_ result: @autoclosure () -> Void) {
    print("Before")
    result()
    print("After")
}

printTest2(print("Hello"))

The @autoclosure attribute is used inside Swift wherever code needs to be passed in and executed only if conditions are right.


12. Why should use autoclosure?
In order to delay the execution of the function. 

13. Parameters in closure can contain in-out parameters?
Yes. But in-out parameters should n't have default values. 

14. What is "in" represent in closure?
"in" indicates the start of the closure body, means the definition of the closure's paramters and return type has finished, and the body of the closure is about to begin. 

15. Does the parameter passed to the closure in constant or variable?
The parameters to functions and closures are always constants.

16. Why escaping closure that refers to self needs special consideration if self refers to an instance of a class?
Capturing self in an escaping closure makes it easy to accidently create a strong reference cycle. 

17. Explain more about escaping closure can't capture mutable reference in an instances of a structure and an enumerations. 
An escaping closure can't capture mutable reference to self when self is an instance of a structure or an enumeration. Because, structures and enumerations
don't allow shared mutability. 

18. Can I use @autoclosure in escaping closure?
Yes. 
If you want an autoclosure that’s allowed to escape, use both the @autoclosure and @escaping attributes. 
func collectCustomerProviders(_ customerProvider: @autoclosure @escaping () -> String) {
    customerProviders.append(customerProvider)
}

18. How you call closure in mutating function of structure/enumerations?



16. Write map function in closure 

17. Write sorted(by: ) in closure

18. Write filter in closure 

19. Write compactMap in closure 

20. Write reduce in closure



